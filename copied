<meta charset="utf-8">

<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">

<title>MSAN 622 Information Visualization</title>

<link href="css/bootstrap.min.css" rel="stylesheet">
<!-- <link href="css/bootstrap-theme.min.css" rel="stylesheet"> -->

<style type="text/css">
    body {
        padding-top: 20px;
        padding-bottom: 20px;
    }
</style>

<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!--[if lt IE 9]>
<script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
<script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
<![endif]-->
</head>

<body>

<!-- Fixed Navbar -->
<nav class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                <span class="sr-only">Toggle Navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#">MSN 622</a>
        </div>

        <div id="navbar" class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
                <li><a href="/information_visualization/#homework">Homework</a></li>
                <li><a href="/information_visualization/#project">Project</a></li>
                <li><a href="/information_visualization/#participation">Participation</a></li>
            </ul>

            <ul class="nav navbar-nav navbar-right">
                <li><a href="/information_visualization/#about">About</a></li>
                <li><a href="/information_visualization/#contact">Contact</a></li>
            </ul>
        </div><!--/.nav-collapse -->
    </div>
</nav>

<div class="jumbotron">
    <div class="container">
        <h2>Project Prototype</h2>
        <h4>Alice Priyanka Benziger</h4>

       
    </div>
</div>

<html lang="en">

<head>
    <meta charset="utf-8">
    <!-- <title>Learning SVG</title> -->

    <!-- load D3 and TopoJSON //-->
    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    <script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>


</head>

<body>
<!-- placeholder SVGs //-->
<div id="final">
<svg id="plot1" class="small" width="200" height="200"></svg>
<svg id="plot2" class="small" width="200" height="200"></svg>
<!-- <svg id="plot3" class="small" width="200" height="200"></svg> -->
</div>
<style>


body {
    background-color: white;
    font: 12
    px sans-serif;
    margin: 8px;
}

div#block {
    max-width: 950px;
}

svg {
    background-color: white;
    margin: 1px;
    float: left;
}



.outline {
    stroke: black;
    stroke-width: 1px;
}
svg#plot1 svg {
  font: 10px sans-serif;
  padding: 10px;
}

svg#plot1 .axis,
svg#plot1 .frame {
  shape-rendering: crispEdges;
}

svg#plot1 .axis line {
  stroke: #ddd;
}

svg#plot1 .axis path {
  display: none;
}

svg#plot1 .frame {
  fill: none;
  stroke: #aaa;
}

svg#plot1 circle {
  fill-opacity: .7;
}

svg#plot1 circle.hidden {
  fill: #ccc !important;
}

svg#plot1 .extent {
  fill: #000;
  fill-opacity: .125;
  stroke: #fff;
}

svg#plot2 .axis,
svg#plot2 .frame {
  shape-rendering: crispEdges;
}

svg#plot2 .axis line {
  stroke: #ddd;
}

svg#plot2 .axis path {
  display: none;
}

svg#plot2 .frame {
  fill: none;
  stroke: #aaa;
}

svg#plot2 circle {
  fill-opacity: .7;
}

svg#plot2 circle.hidden {
  fill: #ccc !important;
}

svg#plot2 .extent {
  fill: #000;
  fill-opacity: .125;
  stroke: #fff;
}



</style>
<script>

d3.select("svg#final")
    .attr("width", 920)
    .attr("height", 120)
    // .attr("fill","steelblue");

 d3.selectAll("svg.small")
    .attr("width", 920)
    .attr("height", 120)




d3.json("redwine.json", function(error, data) {
  var //width = 960,
    size = 150,
    padding = 20;
  var domainByContent = {};
      // contents = d3.keys(data[0]).filter(function(d) { return d !== "quality" && d !== 'alcohol'; }); //&& d !== 'fixed.acidity' && d !== 'free.sulfur.dioxide' && d !== 'density' && d !== 'sulphates' && d !== 'citric.acid' && d !== 'chlorides'; }),
      // n = contents.length;

  data.contents.forEach(function(content) {
    function value(d) { 
        return d[content]; }
    domainByContent[content] = d3.scale.linear()
         .domain([d3.min(data.values, value), d3.max(data.values, value)])
         .range([padding / 2, size - padding / 2]);
   });
  console.log(domainByContent);
 
  scatterplotWhite(data, domainByContent)
  console.log(data)

});

  
  function scatterplotWhite(data, domainByContent){

    var //width = 960,
    size = 150,
    padding = 20;

    // var x = d3.scale.linear()
    //     .range([padding / 2, size - padding / 2]);

    // var y = d3.scale.linear()
    //     .range([size - padding / 2, padding / 2]);

    // var xAxis = d3.svg.axis()
    //     .scale(x)
    //     .orient("bottom")
    //     .ticks(5);

    // var yAxis = d3.svg.axis()
    //     .scale(y)
    //     .orient("left")
    //     .ticks(5);

    var color = d3.scale.ordinal().range(["#addd8e","#43a2ca","#fc9272"]);

    // xAxis.tickSize(size * n);
    // yAxis.tickSize(-size * n);

    //   var brush = d3.svg.brush()
    //       .x(x)
    //       .y(y)
    //       .on("brushstart", brushstart)
    //       .on("brush", brushmove)
    //       .on("brushend", brushend);

      var svg = d3.select("svg#plot1")
          .attr("width", size * data.contents.length)
          .attr("height", size * data.contents.length)
        // .append("g")
        //   .attr("transform", "translate(" + padding + "," + padding / 2 + ")");
      var column = svg.selectAll("g")
        .data(data.contents)
         .enter().append("g")
        .attr("transform", function(d, i) { return "translate(" + i * size + ",0)"; });

      var row = column.selectAll("g")
         .data(cross(data.contents))
         .enter().append("g")
          .attr("transform", function(d, i) { return "translate(0," + i * size + ")"; });

    row.selectAll("line.x")
        .data(function(d) {  return domainByContent[d.x].ticks(5).map(domainByContent[d.x]); })
        .enter().append("line")
        .attr("class", "x")
        .attr("x1", function(d) { return d; })
        .attr("x2", function(d) { return d; })
       .attr("y1", padding / 2)
        .attr("y2", size - padding / 2);
  
    row.selectAll("line.y")
        .data(function(d) { return domainByContent[d.y].ticks(5).map(domainByContent[d.y]); })
      .enter().append("line")
        .attr("class", "y")
        .attr("x1", padding / 2)
        .attr("x2", size - padding / 2)
        .attr("y1", function(d) { return d; })
        .attr("y2", function(d) { return d; });

    row.append("rect")
        .attr("x", padding / 2)
        .attr("y", padding / 2)
       .attr("width", size - padding)
        .attr("height", size - padding)
        .style("fill", "none")
        .style("stroke", "#aaa")
        .style("stroke-width", 1.5)
        .attr("pointer-events", "all")
       .on("mousedown", mousedown);

    var dot = row.selectAll("circle")
        .data(cross(data.contents))
      .enter().append("circle")
        .attr("cx", function(d) { console.log(d); return domainByContent[d.x.x](d.y[d.x.x]);})
        .attr("cy", function(d) { return size - domainByContent[d.x.y](d.y[d.x.y]); })
       .attr("r", 3)
        .style("fill", function(d) { return color(d.y.quality); })
        .style("fill-opacity", .5)
        .attr("pointer-events", "none");

       d3.select(window)
        .on("mousemove", mousemove)
        .on("mouseup", mouseup);
  
    var rect, x0, x1, count;
  
   function mousedown() {
      x0 = d3.svg.mouse(this);
      count = 0;
 
      rect = d3.select(this.parentNode)
        .append("rect")
         .style("fill", "#999")
          .style("fill-opacity", .5);
  
      d3.event.preventDefault();
   }
 
   function mousemove() {
     if (!rect) return;
     x1 = d3.svg.mouse(rect.node());
 
     x1[0] = Math.max(padding / 2, Math.min(size - padding / 2, x1[0]));
     x1[1] = Math.max(padding / 2, Math.min(size - padding / 2, x1[1]));
 
     var minx = Math.min(x0[0], x1[0]),
         maxx = Math.max(x0[0], x1[0]),
         miny = Math.min(x0[1], x1[1]),
         maxy = Math.max(x0[1], x1[1]);
 
     rect
         .attr("x", minx - .5)
         .attr("y", miny - .5)
         .attr("width", maxx - minx + 1)
         .attr("height", maxy - miny + 1);
 
     var v = rect.node().__data__,
         x = domainByContent[v.x],
         y = domainByContent[v.y],
         mins = x.invert(minx),
         maxs = x.invert(maxx),
         mint = y.invert(size - maxy),
         maxt = y.invert(size - miny);
 
     count = 0;
     svg.selectAll("circle")
         .style("fill", function(d) {
           return mins <= d.y[v.x] && maxs >= d.y[v.x]
               && mint <= d.y[v.y] && maxt >= d.y[v.y]
               ? (count++, color(d.y.quality))
               : "#ccc";
         });
   }
 
   function mouseup() {
     if (!rect) return;
     rect.remove();
     rect = null;
 
     if (!count) svg.selectAll("circle")
         .style("fill", function(d) {
           return color(d.y.quality);
         });
   }
 


      // svg.selectAll(".x.axis")
      //     .data(contents)
      //   .enter().append("g")
      //     .attr("class", "x axis")
      //     .attr("transform", function(d, i) { return "translate(" + (n - i - 1) * size + ",0)"; })
      //     .each(function(d) { x.domain(domainByContent[d]); d3.select(this).call(xAxis); });

      // svg.selectAll(".y.axis")
      //     .data(contents)
      //   .enter().append("g")
      //     .attr("class", "y axis")
      //     .attr("transform", function(d, i) { return "translate(0," + i * size + ")"; })
      //     .each(function(d) { y.domain(domainByContent[d]); d3.select(this).call(yAxis); });

      // var cell = svg.selectAll(".cell")
      //     .data(cross(contents, contents))
      //   .enter().append("g")
      //     .attr("class", "cell")
      //     .attr("transform", function(d) { return "translate(" + (n - d.i - 1) * size + "," + d.j * size + ")"; })
      //     .each(plot);

      // // Titles for the diagonal.
      // cell.filter(function(d) { return d.i === d.j; }).append("text")
      //     .attr("x", padding)
      //     .attr("y", padding)
      //     .attr("dy", ".71em")
      //     .text(function(d) { return d.x; });

      // // var legend = svg.selectAll("legend")
      // //                               .data(["High", "Medium", "Low"])//color.domain().slice().reverse())
      // //                               .enter().append("svg")
      // //                               .attr("class", "legend")
      // //                               .attr("transform", function(d, i) { return "translate(1100," + (i * 40 + 420)  + ")"; });
      // //                   legend.append("svg:circle")
      // //                         .attr("class", String)
      // //                         .attr("r", 5)
      // //                         .style("fill", color);
                      
      // //                   legend.append("svg:text")
      // //                         .attr("x", 12)
      // //                         .attr("dy", ".31em")
      // //                         .text(function(d) { return  d; });


      // cell.call(brush);

      // function plot(p) {
      //   var cell = d3.select(this);

      //   x.domain(domainByContent[p.x]);
      //   y.domain(domainByContent[p.y]);

      //   cell.append("rect")
      //       .attr("class", "frame")
      //       .attr("x", padding / 2)
      //       .attr("y", padding / 2)
      //       .attr("width", size - padding)
      //       .attr("height", size - padding);

      //   cell.selectAll("circle")
      //       .data(data)
      //     .enter().append("circle")
      //       .attr("cx", function(d) { return x(d[p.x]); })
      //       .attr("cy", function(d) { return y(d[p.y]); })
      //       .attr("r", 3)
      //       .style("fill", function(d) { return color(d.quality); });
      // }

      // var brushCell;

      // // Clear the previously-active brush, if any.
      // function brushstart(p) {
      //   if (brushCell !== this) {
      //     d3.select(brushCell).call(brush.clear());
      //     x.domain(domainByContent[p.x]);
      //     y.domain(domainByContent[p.y]);
      //     brushCell = this;
      //   }
      // }

      // // Highlight the selected circles.
      // function brushmove(p) {
      //   var e = brush.extent();
      //   svg.selectAll("circle").classed("hidden", function(d) {
      //     return e[0][0] > d[p.x] || d[p.x] > e[1][0]
      //         || e[0][1] > d[p.y] || d[p.y] > e[1][1];
      //   });
      // }

      // // If the brush is empty, select all circles.
      // function brushend() {
      //   if (brush.empty()) svg.selectAll(".hidden").classed("hidden", false);
      // }

      // function cross(a, b) {
      //   var c = [], n = a.length, m = b.length, i, j;
      //   for (i = -1; ++i < n;) for (j = -1; ++j < m;) c.push({x: a[i], i: i, y: b[j], j: j});
      //   return c;
      // }

      // d3.select(self.frameElement).style("height", size * n + padding + 20 + "px");
    function cross(a) {
       return function(d) {
        var c = [];
        for (var i = 0, n = a.length; i < n; i++) c.push({x: d, y: a[i]});
        return c;
     };
    }

  }
</script>
